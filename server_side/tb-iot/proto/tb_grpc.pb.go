// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TestBedMasterClient is the client API for TestBedMaster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestBedMasterClient interface {
	NewTask(ctx context.Context, in *NewTaskRequest, opts ...grpc.CallOption) (*NewTaskResponse, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
}

type testBedMasterClient struct {
	cc grpc.ClientConnInterface
}

func NewTestBedMasterClient(cc grpc.ClientConnInterface) TestBedMasterClient {
	return &testBedMasterClient{cc}
}

func (c *testBedMasterClient) NewTask(ctx context.Context, in *NewTaskRequest, opts ...grpc.CallOption) (*NewTaskResponse, error) {
	out := new(NewTaskResponse)
	err := c.cc.Invoke(ctx, "/tb.TestBedMaster/NewTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testBedMasterClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, "/tb.TestBedMaster/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testBedMasterClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	out := new(ListNodesResponse)
	err := c.cc.Invoke(ctx, "/tb.TestBedMaster/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestBedMasterServer is the server API for TestBedMaster service.
// All implementations must embed UnimplementedTestBedMasterServer
// for forward compatibility
type TestBedMasterServer interface {
	NewTask(context.Context, *NewTaskRequest) (*NewTaskResponse, error)
	GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error)
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error)
	mustEmbedUnimplementedTestBedMasterServer()
}

// UnimplementedTestBedMasterServer must be embedded to have forward compatible implementations.
type UnimplementedTestBedMasterServer struct {
}

func (UnimplementedTestBedMasterServer) NewTask(context.Context, *NewTaskRequest) (*NewTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTask not implemented")
}
func (UnimplementedTestBedMasterServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTestBedMasterServer) ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedTestBedMasterServer) mustEmbedUnimplementedTestBedMasterServer() {}

// UnsafeTestBedMasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestBedMasterServer will
// result in compilation errors.
type UnsafeTestBedMasterServer interface {
	mustEmbedUnimplementedTestBedMasterServer()
}

func RegisterTestBedMasterServer(s grpc.ServiceRegistrar, srv TestBedMasterServer) {
	s.RegisterService(&_TestBedMaster_serviceDesc, srv)
}

func _TestBedMaster_NewTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestBedMasterServer).NewTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tb.TestBedMaster/NewTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestBedMasterServer).NewTask(ctx, req.(*NewTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestBedMaster_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestBedMasterServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tb.TestBedMaster/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestBedMasterServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestBedMaster_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestBedMasterServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tb.TestBedMaster/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestBedMasterServer).ListNodes(ctx, req.(*ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestBedMaster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tb.TestBedMaster",
	HandlerType: (*TestBedMasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewTask",
			Handler:    _TestBedMaster_NewTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _TestBedMaster_GetTask_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _TestBedMaster_ListNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tb.proto",
}
