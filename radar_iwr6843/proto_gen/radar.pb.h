// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: radar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_radar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_radar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_radar_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_radar_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_radar_2eproto;
namespace radar {
class Conf;
class ConfDefaultTypeInternal;
extern ConfDefaultTypeInternal _Conf_default_instance_;
class DetectedObject;
class DetectedObjectDefaultTypeInternal;
extern DetectedObjectDefaultTypeInternal _DetectedObject_default_instance_;
class MultiRawResult;
class MultiRawResultDefaultTypeInternal;
extern MultiRawResultDefaultTypeInternal _MultiRawResult_default_instance_;
class MultiResult;
class MultiResultDefaultTypeInternal;
extern MultiResultDefaultTypeInternal _MultiResult_default_instance_;
class RadarResult;
class RadarResultDefaultTypeInternal;
extern RadarResultDefaultTypeInternal _RadarResult_default_instance_;
class RawRadarResult;
class RawRadarResultDefaultTypeInternal;
extern RawRadarResultDefaultTypeInternal _RawRadarResult_default_instance_;
}  // namespace radar
PROTOBUF_NAMESPACE_OPEN
template<> ::radar::Conf* Arena::CreateMaybeMessage<::radar::Conf>(Arena*);
template<> ::radar::DetectedObject* Arena::CreateMaybeMessage<::radar::DetectedObject>(Arena*);
template<> ::radar::MultiRawResult* Arena::CreateMaybeMessage<::radar::MultiRawResult>(Arena*);
template<> ::radar::MultiResult* Arena::CreateMaybeMessage<::radar::MultiResult>(Arena*);
template<> ::radar::RadarResult* Arena::CreateMaybeMessage<::radar::RadarResult>(Arena*);
template<> ::radar::RawRadarResult* Arena::CreateMaybeMessage<::radar::RawRadarResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace radar {

enum Model : int {
  IWR6843 = 0
};
bool Model_IsValid(int value);
constexpr Model Model_MIN = IWR6843;
constexpr Model Model_MAX = IWR6843;
constexpr int Model_ARRAYSIZE = Model_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Model_descriptor();
template<typename T>
inline const std::string& Model_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Model>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Model_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Model_descriptor(), enum_t_value);
}
inline bool Model_Parse(
    const std::string& name, Model* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Model>(
    Model_descriptor(), name, value);
}
// ===================================================================

class RawRadarResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:radar.RawRadarResult) */ {
 public:
  inline RawRadarResult() : RawRadarResult(nullptr) {};
  virtual ~RawRadarResult();

  RawRadarResult(const RawRadarResult& from);
  RawRadarResult(RawRadarResult&& from) noexcept
    : RawRadarResult() {
    *this = ::std::move(from);
  }

  inline RawRadarResult& operator=(const RawRadarResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawRadarResult& operator=(RawRadarResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawRadarResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RawRadarResult* internal_default_instance() {
    return reinterpret_cast<const RawRadarResult*>(
               &_RawRadarResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RawRadarResult& a, RawRadarResult& b) {
    a.Swap(&b);
  }
  inline void Swap(RawRadarResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawRadarResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawRadarResult* New() const final {
    return CreateMaybeMessage<RawRadarResult>(nullptr);
  }

  RawRadarResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawRadarResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawRadarResult& from);
  void MergeFrom(const RawRadarResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawRadarResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "radar.RawRadarResult";
  }
  protected:
  explicit RawRadarResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_radar_2eproto);
    return ::descriptor_table_radar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kTimestampFieldNumber = 1,
    kSeqFieldNumber = 2,
    kModelFieldNumber = 3,
  };
  // required bytes data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // required double timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // required int32 seq = 2;
  bool has_seq() const;
  private:
  bool _internal_has_seq() const;
  public:
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .radar.Model model = 3;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  ::radar::Model model() const;
  void set_model(::radar::Model value);
  private:
  ::radar::Model _internal_model() const;
  void _internal_set_model(::radar::Model value);
  public:

  // @@protoc_insertion_point(class_scope:radar.RawRadarResult)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  double timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_;
  int model_;
  friend struct ::TableStruct_radar_2eproto;
};
// -------------------------------------------------------------------

class DetectedObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:radar.DetectedObject) */ {
 public:
  inline DetectedObject() : DetectedObject(nullptr) {};
  virtual ~DetectedObject();

  DetectedObject(const DetectedObject& from);
  DetectedObject(DetectedObject&& from) noexcept
    : DetectedObject() {
    *this = ::std::move(from);
  }

  inline DetectedObject& operator=(const DetectedObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectedObject& operator=(DetectedObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectedObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectedObject* internal_default_instance() {
    return reinterpret_cast<const DetectedObject*>(
               &_DetectedObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DetectedObject& a, DetectedObject& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectedObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectedObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectedObject* New() const final {
    return CreateMaybeMessage<DetectedObject>(nullptr);
  }

  DetectedObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectedObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectedObject& from);
  void MergeFrom(const DetectedObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectedObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "radar.DetectedObject";
  }
  protected:
  explicit DetectedObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_radar_2eproto);
    return ::descriptor_table_radar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kVelFieldNumber = 4,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // optional float vel = 4;
  bool has_vel() const;
  private:
  bool _internal_has_vel() const;
  public:
  void clear_vel();
  float vel() const;
  void set_vel(float value);
  private:
  float _internal_vel() const;
  void _internal_set_vel(float value);
  public:

  // @@protoc_insertion_point(class_scope:radar.DetectedObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  float vel_;
  friend struct ::TableStruct_radar_2eproto;
};
// -------------------------------------------------------------------

class RadarResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:radar.RadarResult) */ {
 public:
  inline RadarResult() : RadarResult(nullptr) {};
  virtual ~RadarResult();

  RadarResult(const RadarResult& from);
  RadarResult(RadarResult&& from) noexcept
    : RadarResult() {
    *this = ::std::move(from);
  }

  inline RadarResult& operator=(const RadarResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarResult& operator=(RadarResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarResult* internal_default_instance() {
    return reinterpret_cast<const RadarResult*>(
               &_RadarResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RadarResult& a, RadarResult& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadarResult* New() const final {
    return CreateMaybeMessage<RadarResult>(nullptr);
  }

  RadarResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarResult& from);
  void MergeFrom(const RadarResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "radar.RadarResult";
  }
  protected:
  explicit RadarResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_radar_2eproto);
    return ::descriptor_table_radar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectFieldNumber = 4,
    kTimestampFieldNumber = 1,
    kSeqFieldNumber = 2,
    kModelFieldNumber = 3,
  };
  // repeated .radar.DetectedObject object = 4;
  int object_size() const;
  private:
  int _internal_object_size() const;
  public:
  void clear_object();
  ::radar::DetectedObject* mutable_object(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::radar::DetectedObject >*
      mutable_object();
  private:
  const ::radar::DetectedObject& _internal_object(int index) const;
  ::radar::DetectedObject* _internal_add_object();
  public:
  const ::radar::DetectedObject& object(int index) const;
  ::radar::DetectedObject* add_object();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::radar::DetectedObject >&
      object() const;

  // required double timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // required int32 seq = 2;
  bool has_seq() const;
  private:
  bool _internal_has_seq() const;
  public:
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .radar.Model model = 3;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  ::radar::Model model() const;
  void set_model(::radar::Model value);
  private:
  ::radar::Model _internal_model() const;
  void _internal_set_model(::radar::Model value);
  public:

  // @@protoc_insertion_point(class_scope:radar.RadarResult)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::radar::DetectedObject > object_;
  double timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_;
  int model_;
  friend struct ::TableStruct_radar_2eproto;
};
// -------------------------------------------------------------------

class MultiRawResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:radar.MultiRawResult) */ {
 public:
  inline MultiRawResult() : MultiRawResult(nullptr) {};
  virtual ~MultiRawResult();

  MultiRawResult(const MultiRawResult& from);
  MultiRawResult(MultiRawResult&& from) noexcept
    : MultiRawResult() {
    *this = ::std::move(from);
  }

  inline MultiRawResult& operator=(const MultiRawResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiRawResult& operator=(MultiRawResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiRawResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiRawResult* internal_default_instance() {
    return reinterpret_cast<const MultiRawResult*>(
               &_MultiRawResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MultiRawResult& a, MultiRawResult& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiRawResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiRawResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiRawResult* New() const final {
    return CreateMaybeMessage<MultiRawResult>(nullptr);
  }

  MultiRawResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiRawResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiRawResult& from);
  void MergeFrom(const MultiRawResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiRawResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "radar.MultiRawResult";
  }
  protected:
  explicit MultiRawResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_radar_2eproto);
    return ::descriptor_table_radar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 3,
    kTimestampFieldNumber = 1,
    kSeqFieldNumber = 2,
  };
  // repeated .radar.RawRadarResult result = 3;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::radar::RawRadarResult* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::radar::RawRadarResult >*
      mutable_result();
  private:
  const ::radar::RawRadarResult& _internal_result(int index) const;
  ::radar::RawRadarResult* _internal_add_result();
  public:
  const ::radar::RawRadarResult& result(int index) const;
  ::radar::RawRadarResult* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::radar::RawRadarResult >&
      result() const;

  // required double timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // required int32 seq = 2;
  bool has_seq() const;
  private:
  bool _internal_has_seq() const;
  public:
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:radar.MultiRawResult)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::radar::RawRadarResult > result_;
  double timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_;
  friend struct ::TableStruct_radar_2eproto;
};
// -------------------------------------------------------------------

class MultiResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:radar.MultiResult) */ {
 public:
  inline MultiResult() : MultiResult(nullptr) {};
  virtual ~MultiResult();

  MultiResult(const MultiResult& from);
  MultiResult(MultiResult&& from) noexcept
    : MultiResult() {
    *this = ::std::move(from);
  }

  inline MultiResult& operator=(const MultiResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiResult& operator=(MultiResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiResult* internal_default_instance() {
    return reinterpret_cast<const MultiResult*>(
               &_MultiResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MultiResult& a, MultiResult& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiResult* New() const final {
    return CreateMaybeMessage<MultiResult>(nullptr);
  }

  MultiResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiResult& from);
  void MergeFrom(const MultiResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "radar.MultiResult";
  }
  protected:
  explicit MultiResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_radar_2eproto);
    return ::descriptor_table_radar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParsedResultFieldNumber = 3,
    kTimestampFieldNumber = 1,
    kSeqFieldNumber = 2,
  };
  // repeated .radar.RadarResult parsed_result = 3;
  int parsed_result_size() const;
  private:
  int _internal_parsed_result_size() const;
  public:
  void clear_parsed_result();
  ::radar::RadarResult* mutable_parsed_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::radar::RadarResult >*
      mutable_parsed_result();
  private:
  const ::radar::RadarResult& _internal_parsed_result(int index) const;
  ::radar::RadarResult* _internal_add_parsed_result();
  public:
  const ::radar::RadarResult& parsed_result(int index) const;
  ::radar::RadarResult* add_parsed_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::radar::RadarResult >&
      parsed_result() const;

  // required double timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // required int32 seq = 2;
  bool has_seq() const;
  private:
  bool _internal_has_seq() const;
  public:
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:radar.MultiResult)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::radar::RadarResult > parsed_result_;
  double timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_;
  friend struct ::TableStruct_radar_2eproto;
};
// -------------------------------------------------------------------

class Conf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:radar.Conf) */ {
 public:
  inline Conf() : Conf(nullptr) {};
  virtual ~Conf();

  Conf(const Conf& from);
  Conf(Conf&& from) noexcept
    : Conf() {
    *this = ::std::move(from);
  }

  inline Conf& operator=(const Conf& from) {
    CopyFrom(from);
    return *this;
  }
  inline Conf& operator=(Conf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Conf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Conf* internal_default_instance() {
    return reinterpret_cast<const Conf*>(
               &_Conf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Conf& a, Conf& b) {
    a.Swap(&b);
  }
  inline void Swap(Conf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Conf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Conf* New() const final {
    return CreateMaybeMessage<Conf>(nullptr);
  }

  Conf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Conf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Conf& from);
  void MergeFrom(const Conf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Conf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "radar.Conf";
  }
  protected:
  explicit Conf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_radar_2eproto);
    return ::descriptor_table_radar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfFieldNumber = 1,
    kWriteTopicFieldNumber = 3,
    kReadParsedFieldNumber = 2,
  };
  // required string conf = 1;
  bool has_conf() const;
  private:
  bool _internal_has_conf() const;
  public:
  void clear_conf();
  const std::string& conf() const;
  void set_conf(const std::string& value);
  void set_conf(std::string&& value);
  void set_conf(const char* value);
  void set_conf(const char* value, size_t size);
  std::string* mutable_conf();
  std::string* release_conf();
  void set_allocated_conf(std::string* conf);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_conf();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_conf(
      std::string* conf);
  private:
  const std::string& _internal_conf() const;
  void _internal_set_conf(const std::string& value);
  std::string* _internal_mutable_conf();
  public:

  // required string write_topic = 3;
  bool has_write_topic() const;
  private:
  bool _internal_has_write_topic() const;
  public:
  void clear_write_topic();
  const std::string& write_topic() const;
  void set_write_topic(const std::string& value);
  void set_write_topic(std::string&& value);
  void set_write_topic(const char* value);
  void set_write_topic(const char* value, size_t size);
  std::string* mutable_write_topic();
  std::string* release_write_topic();
  void set_allocated_write_topic(std::string* write_topic);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_write_topic();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_write_topic(
      std::string* write_topic);
  private:
  const std::string& _internal_write_topic() const;
  void _internal_set_write_topic(const std::string& value);
  std::string* _internal_mutable_write_topic();
  public:

  // optional bool read_parsed = 2 [default = false];
  bool has_read_parsed() const;
  private:
  bool _internal_has_read_parsed() const;
  public:
  void clear_read_parsed();
  bool read_parsed() const;
  void set_read_parsed(bool value);
  private:
  bool _internal_read_parsed() const;
  void _internal_set_read_parsed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:radar.Conf)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conf_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr write_topic_;
  bool read_parsed_;
  friend struct ::TableStruct_radar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RawRadarResult

// required double timestamp = 1;
inline bool RawRadarResult::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RawRadarResult::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void RawRadarResult::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double RawRadarResult::_internal_timestamp() const {
  return timestamp_;
}
inline double RawRadarResult::timestamp() const {
  // @@protoc_insertion_point(field_get:radar.RawRadarResult.timestamp)
  return _internal_timestamp();
}
inline void RawRadarResult::_internal_set_timestamp(double value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void RawRadarResult::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:radar.RawRadarResult.timestamp)
}

// required int32 seq = 2;
inline bool RawRadarResult::_internal_has_seq() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RawRadarResult::has_seq() const {
  return _internal_has_seq();
}
inline void RawRadarResult::clear_seq() {
  seq_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RawRadarResult::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RawRadarResult::seq() const {
  // @@protoc_insertion_point(field_get:radar.RawRadarResult.seq)
  return _internal_seq();
}
inline void RawRadarResult::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  seq_ = value;
}
inline void RawRadarResult::set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:radar.RawRadarResult.seq)
}

// required .radar.Model model = 3;
inline bool RawRadarResult::_internal_has_model() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RawRadarResult::has_model() const {
  return _internal_has_model();
}
inline void RawRadarResult::clear_model() {
  model_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::radar::Model RawRadarResult::_internal_model() const {
  return static_cast< ::radar::Model >(model_);
}
inline ::radar::Model RawRadarResult::model() const {
  // @@protoc_insertion_point(field_get:radar.RawRadarResult.model)
  return _internal_model();
}
inline void RawRadarResult::_internal_set_model(::radar::Model value) {
  assert(::radar::Model_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  model_ = value;
}
inline void RawRadarResult::set_model(::radar::Model value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:radar.RawRadarResult.model)
}

// required bytes data = 4;
inline bool RawRadarResult::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RawRadarResult::has_data() const {
  return _internal_has_data();
}
inline void RawRadarResult::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RawRadarResult::data() const {
  // @@protoc_insertion_point(field_get:radar.RawRadarResult.data)
  return _internal_data();
}
inline void RawRadarResult::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:radar.RawRadarResult.data)
}
inline std::string* RawRadarResult::mutable_data() {
  // @@protoc_insertion_point(field_mutable:radar.RawRadarResult.data)
  return _internal_mutable_data();
}
inline const std::string& RawRadarResult::_internal_data() const {
  return data_.Get();
}
inline void RawRadarResult::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RawRadarResult::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:radar.RawRadarResult.data)
}
inline void RawRadarResult::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:radar.RawRadarResult.data)
}
inline void RawRadarResult::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:radar.RawRadarResult.data)
}
inline std::string* RawRadarResult::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RawRadarResult::release_data() {
  // @@protoc_insertion_point(field_release:radar.RawRadarResult.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RawRadarResult::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:radar.RawRadarResult.data)
}
inline std::string* RawRadarResult::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:radar.RawRadarResult.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RawRadarResult::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:radar.RawRadarResult.data)
}

// -------------------------------------------------------------------

// DetectedObject

// optional float x = 1;
inline bool DetectedObject::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DetectedObject::has_x() const {
  return _internal_has_x();
}
inline void DetectedObject::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float DetectedObject::_internal_x() const {
  return x_;
}
inline float DetectedObject::x() const {
  // @@protoc_insertion_point(field_get:radar.DetectedObject.x)
  return _internal_x();
}
inline void DetectedObject::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void DetectedObject::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:radar.DetectedObject.x)
}

// optional float y = 2;
inline bool DetectedObject::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DetectedObject::has_y() const {
  return _internal_has_y();
}
inline void DetectedObject::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float DetectedObject::_internal_y() const {
  return y_;
}
inline float DetectedObject::y() const {
  // @@protoc_insertion_point(field_get:radar.DetectedObject.y)
  return _internal_y();
}
inline void DetectedObject::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void DetectedObject::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:radar.DetectedObject.y)
}

// optional float z = 3;
inline bool DetectedObject::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DetectedObject::has_z() const {
  return _internal_has_z();
}
inline void DetectedObject::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float DetectedObject::_internal_z() const {
  return z_;
}
inline float DetectedObject::z() const {
  // @@protoc_insertion_point(field_get:radar.DetectedObject.z)
  return _internal_z();
}
inline void DetectedObject::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void DetectedObject::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:radar.DetectedObject.z)
}

// optional float vel = 4;
inline bool DetectedObject::_internal_has_vel() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DetectedObject::has_vel() const {
  return _internal_has_vel();
}
inline void DetectedObject::clear_vel() {
  vel_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float DetectedObject::_internal_vel() const {
  return vel_;
}
inline float DetectedObject::vel() const {
  // @@protoc_insertion_point(field_get:radar.DetectedObject.vel)
  return _internal_vel();
}
inline void DetectedObject::_internal_set_vel(float value) {
  _has_bits_[0] |= 0x00000008u;
  vel_ = value;
}
inline void DetectedObject::set_vel(float value) {
  _internal_set_vel(value);
  // @@protoc_insertion_point(field_set:radar.DetectedObject.vel)
}

// -------------------------------------------------------------------

// RadarResult

// required double timestamp = 1;
inline bool RadarResult::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RadarResult::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void RadarResult::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double RadarResult::_internal_timestamp() const {
  return timestamp_;
}
inline double RadarResult::timestamp() const {
  // @@protoc_insertion_point(field_get:radar.RadarResult.timestamp)
  return _internal_timestamp();
}
inline void RadarResult::_internal_set_timestamp(double value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ = value;
}
inline void RadarResult::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:radar.RadarResult.timestamp)
}

// required int32 seq = 2;
inline bool RadarResult::_internal_has_seq() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RadarResult::has_seq() const {
  return _internal_has_seq();
}
inline void RadarResult::clear_seq() {
  seq_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarResult::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarResult::seq() const {
  // @@protoc_insertion_point(field_get:radar.RadarResult.seq)
  return _internal_seq();
}
inline void RadarResult::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  seq_ = value;
}
inline void RadarResult::set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:radar.RadarResult.seq)
}

// required .radar.Model model = 3;
inline bool RadarResult::_internal_has_model() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RadarResult::has_model() const {
  return _internal_has_model();
}
inline void RadarResult::clear_model() {
  model_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::radar::Model RadarResult::_internal_model() const {
  return static_cast< ::radar::Model >(model_);
}
inline ::radar::Model RadarResult::model() const {
  // @@protoc_insertion_point(field_get:radar.RadarResult.model)
  return _internal_model();
}
inline void RadarResult::_internal_set_model(::radar::Model value) {
  assert(::radar::Model_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  model_ = value;
}
inline void RadarResult::set_model(::radar::Model value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:radar.RadarResult.model)
}

// repeated .radar.DetectedObject object = 4;
inline int RadarResult::_internal_object_size() const {
  return object_.size();
}
inline int RadarResult::object_size() const {
  return _internal_object_size();
}
inline void RadarResult::clear_object() {
  object_.Clear();
}
inline ::radar::DetectedObject* RadarResult::mutable_object(int index) {
  // @@protoc_insertion_point(field_mutable:radar.RadarResult.object)
  return object_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::radar::DetectedObject >*
RadarResult::mutable_object() {
  // @@protoc_insertion_point(field_mutable_list:radar.RadarResult.object)
  return &object_;
}
inline const ::radar::DetectedObject& RadarResult::_internal_object(int index) const {
  return object_.Get(index);
}
inline const ::radar::DetectedObject& RadarResult::object(int index) const {
  // @@protoc_insertion_point(field_get:radar.RadarResult.object)
  return _internal_object(index);
}
inline ::radar::DetectedObject* RadarResult::_internal_add_object() {
  return object_.Add();
}
inline ::radar::DetectedObject* RadarResult::add_object() {
  // @@protoc_insertion_point(field_add:radar.RadarResult.object)
  return _internal_add_object();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::radar::DetectedObject >&
RadarResult::object() const {
  // @@protoc_insertion_point(field_list:radar.RadarResult.object)
  return object_;
}

// -------------------------------------------------------------------

// MultiRawResult

// required double timestamp = 1;
inline bool MultiRawResult::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MultiRawResult::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void MultiRawResult::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double MultiRawResult::_internal_timestamp() const {
  return timestamp_;
}
inline double MultiRawResult::timestamp() const {
  // @@protoc_insertion_point(field_get:radar.MultiRawResult.timestamp)
  return _internal_timestamp();
}
inline void MultiRawResult::_internal_set_timestamp(double value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ = value;
}
inline void MultiRawResult::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:radar.MultiRawResult.timestamp)
}

// required int32 seq = 2;
inline bool MultiRawResult::_internal_has_seq() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MultiRawResult::has_seq() const {
  return _internal_has_seq();
}
inline void MultiRawResult::clear_seq() {
  seq_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiRawResult::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiRawResult::seq() const {
  // @@protoc_insertion_point(field_get:radar.MultiRawResult.seq)
  return _internal_seq();
}
inline void MultiRawResult::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  seq_ = value;
}
inline void MultiRawResult::set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:radar.MultiRawResult.seq)
}

// repeated .radar.RawRadarResult result = 3;
inline int MultiRawResult::_internal_result_size() const {
  return result_.size();
}
inline int MultiRawResult::result_size() const {
  return _internal_result_size();
}
inline void MultiRawResult::clear_result() {
  result_.Clear();
}
inline ::radar::RawRadarResult* MultiRawResult::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:radar.MultiRawResult.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::radar::RawRadarResult >*
MultiRawResult::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:radar.MultiRawResult.result)
  return &result_;
}
inline const ::radar::RawRadarResult& MultiRawResult::_internal_result(int index) const {
  return result_.Get(index);
}
inline const ::radar::RawRadarResult& MultiRawResult::result(int index) const {
  // @@protoc_insertion_point(field_get:radar.MultiRawResult.result)
  return _internal_result(index);
}
inline ::radar::RawRadarResult* MultiRawResult::_internal_add_result() {
  return result_.Add();
}
inline ::radar::RawRadarResult* MultiRawResult::add_result() {
  // @@protoc_insertion_point(field_add:radar.MultiRawResult.result)
  return _internal_add_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::radar::RawRadarResult >&
MultiRawResult::result() const {
  // @@protoc_insertion_point(field_list:radar.MultiRawResult.result)
  return result_;
}

// -------------------------------------------------------------------

// MultiResult

// required double timestamp = 1;
inline bool MultiResult::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MultiResult::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void MultiResult::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double MultiResult::_internal_timestamp() const {
  return timestamp_;
}
inline double MultiResult::timestamp() const {
  // @@protoc_insertion_point(field_get:radar.MultiResult.timestamp)
  return _internal_timestamp();
}
inline void MultiResult::_internal_set_timestamp(double value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ = value;
}
inline void MultiResult::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:radar.MultiResult.timestamp)
}

// required int32 seq = 2;
inline bool MultiResult::_internal_has_seq() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MultiResult::has_seq() const {
  return _internal_has_seq();
}
inline void MultiResult::clear_seq() {
  seq_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiResult::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultiResult::seq() const {
  // @@protoc_insertion_point(field_get:radar.MultiResult.seq)
  return _internal_seq();
}
inline void MultiResult::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  seq_ = value;
}
inline void MultiResult::set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:radar.MultiResult.seq)
}

// repeated .radar.RadarResult parsed_result = 3;
inline int MultiResult::_internal_parsed_result_size() const {
  return parsed_result_.size();
}
inline int MultiResult::parsed_result_size() const {
  return _internal_parsed_result_size();
}
inline void MultiResult::clear_parsed_result() {
  parsed_result_.Clear();
}
inline ::radar::RadarResult* MultiResult::mutable_parsed_result(int index) {
  // @@protoc_insertion_point(field_mutable:radar.MultiResult.parsed_result)
  return parsed_result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::radar::RadarResult >*
MultiResult::mutable_parsed_result() {
  // @@protoc_insertion_point(field_mutable_list:radar.MultiResult.parsed_result)
  return &parsed_result_;
}
inline const ::radar::RadarResult& MultiResult::_internal_parsed_result(int index) const {
  return parsed_result_.Get(index);
}
inline const ::radar::RadarResult& MultiResult::parsed_result(int index) const {
  // @@protoc_insertion_point(field_get:radar.MultiResult.parsed_result)
  return _internal_parsed_result(index);
}
inline ::radar::RadarResult* MultiResult::_internal_add_parsed_result() {
  return parsed_result_.Add();
}
inline ::radar::RadarResult* MultiResult::add_parsed_result() {
  // @@protoc_insertion_point(field_add:radar.MultiResult.parsed_result)
  return _internal_add_parsed_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::radar::RadarResult >&
MultiResult::parsed_result() const {
  // @@protoc_insertion_point(field_list:radar.MultiResult.parsed_result)
  return parsed_result_;
}

// -------------------------------------------------------------------

// Conf

// required string conf = 1;
inline bool Conf::_internal_has_conf() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Conf::has_conf() const {
  return _internal_has_conf();
}
inline void Conf::clear_conf() {
  conf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Conf::conf() const {
  // @@protoc_insertion_point(field_get:radar.Conf.conf)
  return _internal_conf();
}
inline void Conf::set_conf(const std::string& value) {
  _internal_set_conf(value);
  // @@protoc_insertion_point(field_set:radar.Conf.conf)
}
inline std::string* Conf::mutable_conf() {
  // @@protoc_insertion_point(field_mutable:radar.Conf.conf)
  return _internal_mutable_conf();
}
inline const std::string& Conf::_internal_conf() const {
  return conf_.Get();
}
inline void Conf::_internal_set_conf(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  conf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Conf::set_conf(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  conf_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:radar.Conf.conf)
}
inline void Conf::set_conf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  conf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:radar.Conf.conf)
}
inline void Conf::set_conf(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  conf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:radar.Conf.conf)
}
inline std::string* Conf::_internal_mutable_conf() {
  _has_bits_[0] |= 0x00000001u;
  return conf_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Conf::release_conf() {
  // @@protoc_insertion_point(field_release:radar.Conf.conf)
  if (!_internal_has_conf()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return conf_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Conf::set_allocated_conf(std::string* conf) {
  if (conf != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  conf_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), conf,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:radar.Conf.conf)
}
inline std::string* Conf::unsafe_arena_release_conf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:radar.Conf.conf)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return conf_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Conf::unsafe_arena_set_allocated_conf(
    std::string* conf) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (conf != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  conf_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      conf, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:radar.Conf.conf)
}

// optional bool read_parsed = 2 [default = false];
inline bool Conf::_internal_has_read_parsed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Conf::has_read_parsed() const {
  return _internal_has_read_parsed();
}
inline void Conf::clear_read_parsed() {
  read_parsed_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Conf::_internal_read_parsed() const {
  return read_parsed_;
}
inline bool Conf::read_parsed() const {
  // @@protoc_insertion_point(field_get:radar.Conf.read_parsed)
  return _internal_read_parsed();
}
inline void Conf::_internal_set_read_parsed(bool value) {
  _has_bits_[0] |= 0x00000004u;
  read_parsed_ = value;
}
inline void Conf::set_read_parsed(bool value) {
  _internal_set_read_parsed(value);
  // @@protoc_insertion_point(field_set:radar.Conf.read_parsed)
}

// required string write_topic = 3;
inline bool Conf::_internal_has_write_topic() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Conf::has_write_topic() const {
  return _internal_has_write_topic();
}
inline void Conf::clear_write_topic() {
  write_topic_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Conf::write_topic() const {
  // @@protoc_insertion_point(field_get:radar.Conf.write_topic)
  return _internal_write_topic();
}
inline void Conf::set_write_topic(const std::string& value) {
  _internal_set_write_topic(value);
  // @@protoc_insertion_point(field_set:radar.Conf.write_topic)
}
inline std::string* Conf::mutable_write_topic() {
  // @@protoc_insertion_point(field_mutable:radar.Conf.write_topic)
  return _internal_mutable_write_topic();
}
inline const std::string& Conf::_internal_write_topic() const {
  return write_topic_.Get();
}
inline void Conf::_internal_set_write_topic(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  write_topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Conf::set_write_topic(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  write_topic_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:radar.Conf.write_topic)
}
inline void Conf::set_write_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  write_topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:radar.Conf.write_topic)
}
inline void Conf::set_write_topic(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  write_topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:radar.Conf.write_topic)
}
inline std::string* Conf::_internal_mutable_write_topic() {
  _has_bits_[0] |= 0x00000002u;
  return write_topic_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Conf::release_write_topic() {
  // @@protoc_insertion_point(field_release:radar.Conf.write_topic)
  if (!_internal_has_write_topic()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return write_topic_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Conf::set_allocated_write_topic(std::string* write_topic) {
  if (write_topic != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  write_topic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), write_topic,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:radar.Conf.write_topic)
}
inline std::string* Conf::unsafe_arena_release_write_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:radar.Conf.write_topic)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return write_topic_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Conf::unsafe_arena_set_allocated_write_topic(
    std::string* write_topic) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (write_topic != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  write_topic_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      write_topic, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:radar.Conf.write_topic)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace radar

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::radar::Model> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::radar::Model>() {
  return ::radar::Model_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_radar_2eproto
