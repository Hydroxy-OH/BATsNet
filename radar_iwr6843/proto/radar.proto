syntax = "proto2";

import "common.proto";

package radar;

service Controller {
  rpc GetInitDeviceConf(common.Empty) returns (DeviceConf) {}
  rpc GetConf(common.Empty) returns (ControllerConf) {}
  rpc GetState(common.Empty) returns (ControllerMutableState) {}
  rpc SetState(ControllerMutableState) returns (SetStateResponse) {}
}

message SetStateError {
  enum ErrorType { NOT_SUPPORT = 1; }
  required string field = 1;
  required ErrorType type = 2;
}

message SetStateResponse {
  required ControllerMutableState last_state = 1;
  repeated SetStateError error = 2;
}

//////////////////////////////////////

enum Model { IWR6843 = 0; }

message ControllerConf {
  required common.BasicConf base = 1;
  required Model model = 2;
  // mode key, mode file path
  map<string, string> possible_mode = 3;
}

message ControllerMutableState {
  required common.BasicMutableState base = 1;
  optional string current_mode = 2;
}

message RawRadarResult {
  required double timestamp = 1;
  required int32 seq = 2;
  required Model model = 3;
  required bytes data = 4;
}

message DetectedObject {
  optional float x = 1;
  optional float y = 2;
  optional float z = 3;
  optional float vel = 4;
}

message RadarResult {
  required double timestamp = 1;
  required int32 seq = 2;
  required Model model = 3;
  repeated DetectedObject object = 4;
}

message MultiRawResult {
  required double timestamp = 1;
  required int32 seq = 2;
  repeated RawRadarResult result = 3;
}

message MultiResult {
  required double timestamp = 1;
  required int32 seq = 2;
  repeated RadarResult parsed_result = 3;
}

message DeviceConf {
  required ControllerConf conf = 1;
  required ControllerMutableState state = 2;

  optional bool read_parsed = 3 [ default = false ];

  required string data_collecter_ip = 4;
  required int32 data_collecter_port = 5;
  optional string control_tty = 6;
  optional string data_tty = 7;
}
