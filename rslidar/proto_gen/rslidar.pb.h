// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rslidar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rslidar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rslidar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rslidar_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rslidar_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rslidar_2eproto;
namespace rslidar {
class Conf;
class ConfDefaultTypeInternal;
extern ConfDefaultTypeInternal _Conf_default_instance_;
class Packet;
class PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class Scan;
class ScanDefaultTypeInternal;
extern ScanDefaultTypeInternal _Scan_default_instance_;
}  // namespace rslidar
PROTOBUF_NAMESPACE_OPEN
template<> ::rslidar::Conf* Arena::CreateMaybeMessage<::rslidar::Conf>(Arena*);
template<> ::rslidar::Packet* Arena::CreateMaybeMessage<::rslidar::Packet>(Arena*);
template<> ::rslidar::Scan* Arena::CreateMaybeMessage<::rslidar::Scan>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rslidar {

// ===================================================================

class Packet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rslidar.Packet) */ {
 public:
  inline Packet() : Packet(nullptr) {};
  virtual ~Packet();

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Packet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const final {
    return CreateMaybeMessage<Packet>(nullptr);
  }

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rslidar.Packet";
  }
  protected:
  explicit Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rslidar_2eproto);
    return ::descriptor_table_rslidar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kTimestampFieldNumber = 1,
    kSeqFieldNumber = 2,
  };
  // required bytes data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // required double timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // required int32 seq = 2;
  bool has_seq() const;
  private:
  bool _internal_has_seq() const;
  public:
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rslidar.Packet)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  double timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_;
  friend struct ::TableStruct_rslidar_2eproto;
};
// -------------------------------------------------------------------

class Scan PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rslidar.Scan) */ {
 public:
  inline Scan() : Scan(nullptr) {};
  virtual ~Scan();

  Scan(const Scan& from);
  Scan(Scan&& from) noexcept
    : Scan() {
    *this = ::std::move(from);
  }

  inline Scan& operator=(const Scan& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scan& operator=(Scan&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scan* internal_default_instance() {
    return reinterpret_cast<const Scan*>(
               &_Scan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Scan& a, Scan& b) {
    a.Swap(&b);
  }
  inline void Swap(Scan* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scan* New() const final {
    return CreateMaybeMessage<Scan>(nullptr);
  }

  Scan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scan& from);
  void MergeFrom(const Scan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rslidar.Scan";
  }
  protected:
  explicit Scan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rslidar_2eproto);
    return ::descriptor_table_rslidar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketFieldNumber = 3,
    kTimestampFieldNumber = 1,
    kSeqFieldNumber = 2,
  };
  // repeated .rslidar.Packet packet = 3;
  int packet_size() const;
  private:
  int _internal_packet_size() const;
  public:
  void clear_packet();
  ::rslidar::Packet* mutable_packet(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rslidar::Packet >*
      mutable_packet();
  private:
  const ::rslidar::Packet& _internal_packet(int index) const;
  ::rslidar::Packet* _internal_add_packet();
  public:
  const ::rslidar::Packet& packet(int index) const;
  ::rslidar::Packet* add_packet();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rslidar::Packet >&
      packet() const;

  // required double timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // required int32 seq = 2;
  bool has_seq() const;
  private:
  bool _internal_has_seq() const;
  public:
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rslidar.Scan)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rslidar::Packet > packet_;
  double timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_;
  friend struct ::TableStruct_rslidar_2eproto;
};
// -------------------------------------------------------------------

class Conf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rslidar.Conf) */ {
 public:
  inline Conf() : Conf(nullptr) {};
  virtual ~Conf();

  Conf(const Conf& from);
  Conf(Conf&& from) noexcept
    : Conf() {
    *this = ::std::move(from);
  }

  inline Conf& operator=(const Conf& from) {
    CopyFrom(from);
    return *this;
  }
  inline Conf& operator=(Conf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Conf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Conf* internal_default_instance() {
    return reinterpret_cast<const Conf*>(
               &_Conf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Conf& a, Conf& b) {
    a.Swap(&b);
  }
  inline void Swap(Conf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Conf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Conf* New() const final {
    return CreateMaybeMessage<Conf>(nullptr);
  }

  Conf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Conf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Conf& from);
  void MergeFrom(const Conf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Conf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rslidar.Conf";
  }
  protected:
  explicit Conf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rslidar_2eproto);
    return ::descriptor_table_rslidar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIpFieldNumber = 1,
    kModelFieldNumber = 2,
    kOutputPacketsTopicFieldNumber = 8,
    kOutputDifopTopicFieldNumber = 9,
    kRpmFieldNumber = 3,
    kNpacketsFieldNumber = 4,
    kMsopPortFieldNumber = 5,
    kCutAngleFieldNumber = 7,
    kDifopPortFieldNumber = 6,
  };
  // optional string device_ip = 1;
  bool has_device_ip() const;
  private:
  bool _internal_has_device_ip() const;
  public:
  void clear_device_ip();
  const std::string& device_ip() const;
  void set_device_ip(const std::string& value);
  void set_device_ip(std::string&& value);
  void set_device_ip(const char* value);
  void set_device_ip(const char* value, size_t size);
  std::string* mutable_device_ip();
  std::string* release_device_ip();
  void set_allocated_device_ip(std::string* device_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_ip(
      std::string* device_ip);
  private:
  const std::string& _internal_device_ip() const;
  void _internal_set_device_ip(const std::string& value);
  std::string* _internal_mutable_device_ip();
  public:

  // optional string model = 2;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_model();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_model(
      std::string* model);
  private:
  const std::string& _internal_model() const;
  void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // required string output_packets_topic = 8;
  bool has_output_packets_topic() const;
  private:
  bool _internal_has_output_packets_topic() const;
  public:
  void clear_output_packets_topic();
  const std::string& output_packets_topic() const;
  void set_output_packets_topic(const std::string& value);
  void set_output_packets_topic(std::string&& value);
  void set_output_packets_topic(const char* value);
  void set_output_packets_topic(const char* value, size_t size);
  std::string* mutable_output_packets_topic();
  std::string* release_output_packets_topic();
  void set_allocated_output_packets_topic(std::string* output_packets_topic);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_output_packets_topic();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_output_packets_topic(
      std::string* output_packets_topic);
  private:
  const std::string& _internal_output_packets_topic() const;
  void _internal_set_output_packets_topic(const std::string& value);
  std::string* _internal_mutable_output_packets_topic();
  public:

  // required string output_difop_topic = 9;
  bool has_output_difop_topic() const;
  private:
  bool _internal_has_output_difop_topic() const;
  public:
  void clear_output_difop_topic();
  const std::string& output_difop_topic() const;
  void set_output_difop_topic(const std::string& value);
  void set_output_difop_topic(std::string&& value);
  void set_output_difop_topic(const char* value);
  void set_output_difop_topic(const char* value, size_t size);
  std::string* mutable_output_difop_topic();
  std::string* release_output_difop_topic();
  void set_allocated_output_difop_topic(std::string* output_difop_topic);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_output_difop_topic();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_output_difop_topic(
      std::string* output_difop_topic);
  private:
  const std::string& _internal_output_difop_topic() const;
  void _internal_set_output_difop_topic(const std::string& value);
  std::string* _internal_mutable_output_difop_topic();
  public:

  // optional double rpm = 3;
  bool has_rpm() const;
  private:
  bool _internal_has_rpm() const;
  public:
  void clear_rpm();
  double rpm() const;
  void set_rpm(double value);
  private:
  double _internal_rpm() const;
  void _internal_set_rpm(double value);
  public:

  // optional int32 npackets = 4;
  bool has_npackets() const;
  private:
  bool _internal_has_npackets() const;
  public:
  void clear_npackets();
  ::PROTOBUF_NAMESPACE_ID::int32 npackets() const;
  void set_npackets(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_npackets() const;
  void _internal_set_npackets(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 msop_port = 5;
  bool has_msop_port() const;
  private:
  bool _internal_has_msop_port() const;
  public:
  void clear_msop_port();
  ::PROTOBUF_NAMESPACE_ID::int32 msop_port() const;
  void set_msop_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msop_port() const;
  void _internal_set_msop_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double cut_angle = 7;
  bool has_cut_angle() const;
  private:
  bool _internal_has_cut_angle() const;
  public:
  void clear_cut_angle();
  double cut_angle() const;
  void set_cut_angle(double value);
  private:
  double _internal_cut_angle() const;
  void _internal_set_cut_angle(double value);
  public:

  // optional int32 difop_port = 6;
  bool has_difop_port() const;
  private:
  bool _internal_has_difop_port() const;
  public:
  void clear_difop_port();
  ::PROTOBUF_NAMESPACE_ID::int32 difop_port() const;
  void set_difop_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_difop_port() const;
  void _internal_set_difop_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rslidar.Conf)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_packets_topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_difop_topic_;
  double rpm_;
  ::PROTOBUF_NAMESPACE_ID::int32 npackets_;
  ::PROTOBUF_NAMESPACE_ID::int32 msop_port_;
  double cut_angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 difop_port_;
  friend struct ::TableStruct_rslidar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Packet

// required double timestamp = 1;
inline bool Packet::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Packet::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Packet::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Packet::_internal_timestamp() const {
  return timestamp_;
}
inline double Packet::timestamp() const {
  // @@protoc_insertion_point(field_get:rslidar.Packet.timestamp)
  return _internal_timestamp();
}
inline void Packet::_internal_set_timestamp(double value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void Packet::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:rslidar.Packet.timestamp)
}

// required int32 seq = 2;
inline bool Packet::_internal_has_seq() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Packet::has_seq() const {
  return _internal_has_seq();
}
inline void Packet::clear_seq() {
  seq_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Packet::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Packet::seq() const {
  // @@protoc_insertion_point(field_get:rslidar.Packet.seq)
  return _internal_seq();
}
inline void Packet::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  seq_ = value;
}
inline void Packet::set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:rslidar.Packet.seq)
}

// required bytes data = 3;
inline bool Packet::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Packet::has_data() const {
  return _internal_has_data();
}
inline void Packet::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Packet::data() const {
  // @@protoc_insertion_point(field_get:rslidar.Packet.data)
  return _internal_data();
}
inline void Packet::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:rslidar.Packet.data)
}
inline std::string* Packet::mutable_data() {
  // @@protoc_insertion_point(field_mutable:rslidar.Packet.data)
  return _internal_mutable_data();
}
inline const std::string& Packet::_internal_data() const {
  return data_.Get();
}
inline void Packet::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Packet::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rslidar.Packet.data)
}
inline void Packet::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rslidar.Packet.data)
}
inline void Packet::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rslidar.Packet.data)
}
inline std::string* Packet::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Packet::release_data() {
  // @@protoc_insertion_point(field_release:rslidar.Packet.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Packet::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rslidar.Packet.data)
}
inline std::string* Packet::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rslidar.Packet.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Packet::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rslidar.Packet.data)
}

// -------------------------------------------------------------------

// Scan

// required double timestamp = 1;
inline bool Scan::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Scan::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Scan::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Scan::_internal_timestamp() const {
  return timestamp_;
}
inline double Scan::timestamp() const {
  // @@protoc_insertion_point(field_get:rslidar.Scan.timestamp)
  return _internal_timestamp();
}
inline void Scan::_internal_set_timestamp(double value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ = value;
}
inline void Scan::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:rslidar.Scan.timestamp)
}

// required int32 seq = 2;
inline bool Scan::_internal_has_seq() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Scan::has_seq() const {
  return _internal_has_seq();
}
inline void Scan::clear_seq() {
  seq_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scan::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scan::seq() const {
  // @@protoc_insertion_point(field_get:rslidar.Scan.seq)
  return _internal_seq();
}
inline void Scan::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  seq_ = value;
}
inline void Scan::set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:rslidar.Scan.seq)
}

// repeated .rslidar.Packet packet = 3;
inline int Scan::_internal_packet_size() const {
  return packet_.size();
}
inline int Scan::packet_size() const {
  return _internal_packet_size();
}
inline void Scan::clear_packet() {
  packet_.Clear();
}
inline ::rslidar::Packet* Scan::mutable_packet(int index) {
  // @@protoc_insertion_point(field_mutable:rslidar.Scan.packet)
  return packet_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rslidar::Packet >*
Scan::mutable_packet() {
  // @@protoc_insertion_point(field_mutable_list:rslidar.Scan.packet)
  return &packet_;
}
inline const ::rslidar::Packet& Scan::_internal_packet(int index) const {
  return packet_.Get(index);
}
inline const ::rslidar::Packet& Scan::packet(int index) const {
  // @@protoc_insertion_point(field_get:rslidar.Scan.packet)
  return _internal_packet(index);
}
inline ::rslidar::Packet* Scan::_internal_add_packet() {
  return packet_.Add();
}
inline ::rslidar::Packet* Scan::add_packet() {
  // @@protoc_insertion_point(field_add:rslidar.Scan.packet)
  return _internal_add_packet();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rslidar::Packet >&
Scan::packet() const {
  // @@protoc_insertion_point(field_list:rslidar.Scan.packet)
  return packet_;
}

// -------------------------------------------------------------------

// Conf

// optional string device_ip = 1;
inline bool Conf::_internal_has_device_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Conf::has_device_ip() const {
  return _internal_has_device_ip();
}
inline void Conf::clear_device_ip() {
  device_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Conf::device_ip() const {
  // @@protoc_insertion_point(field_get:rslidar.Conf.device_ip)
  return _internal_device_ip();
}
inline void Conf::set_device_ip(const std::string& value) {
  _internal_set_device_ip(value);
  // @@protoc_insertion_point(field_set:rslidar.Conf.device_ip)
}
inline std::string* Conf::mutable_device_ip() {
  // @@protoc_insertion_point(field_mutable:rslidar.Conf.device_ip)
  return _internal_mutable_device_ip();
}
inline const std::string& Conf::_internal_device_ip() const {
  return device_ip_.Get();
}
inline void Conf::_internal_set_device_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  device_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Conf::set_device_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  device_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rslidar.Conf.device_ip)
}
inline void Conf::set_device_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  device_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rslidar.Conf.device_ip)
}
inline void Conf::set_device_ip(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  device_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rslidar.Conf.device_ip)
}
inline std::string* Conf::_internal_mutable_device_ip() {
  _has_bits_[0] |= 0x00000001u;
  return device_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Conf::release_device_ip() {
  // @@protoc_insertion_point(field_release:rslidar.Conf.device_ip)
  if (!_internal_has_device_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return device_ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Conf::set_allocated_device_ip(std::string* device_ip) {
  if (device_ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rslidar.Conf.device_ip)
}
inline std::string* Conf::unsafe_arena_release_device_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rslidar.Conf.device_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return device_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Conf::unsafe_arena_set_allocated_device_ip(
    std::string* device_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rslidar.Conf.device_ip)
}

// optional string model = 2;
inline bool Conf::_internal_has_model() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Conf::has_model() const {
  return _internal_has_model();
}
inline void Conf::clear_model() {
  model_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Conf::model() const {
  // @@protoc_insertion_point(field_get:rslidar.Conf.model)
  return _internal_model();
}
inline void Conf::set_model(const std::string& value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:rslidar.Conf.model)
}
inline std::string* Conf::mutable_model() {
  // @@protoc_insertion_point(field_mutable:rslidar.Conf.model)
  return _internal_mutable_model();
}
inline const std::string& Conf::_internal_model() const {
  return model_.Get();
}
inline void Conf::_internal_set_model(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Conf::set_model(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  model_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rslidar.Conf.model)
}
inline void Conf::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rslidar.Conf.model)
}
inline void Conf::set_model(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rslidar.Conf.model)
}
inline std::string* Conf::_internal_mutable_model() {
  _has_bits_[0] |= 0x00000002u;
  return model_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Conf::release_model() {
  // @@protoc_insertion_point(field_release:rslidar.Conf.model)
  if (!_internal_has_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return model_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Conf::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rslidar.Conf.model)
}
inline std::string* Conf::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rslidar.Conf.model)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return model_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Conf::unsafe_arena_set_allocated_model(
    std::string* model) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (model != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  model_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      model, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rslidar.Conf.model)
}

// optional double rpm = 3;
inline bool Conf::_internal_has_rpm() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Conf::has_rpm() const {
  return _internal_has_rpm();
}
inline void Conf::clear_rpm() {
  rpm_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Conf::_internal_rpm() const {
  return rpm_;
}
inline double Conf::rpm() const {
  // @@protoc_insertion_point(field_get:rslidar.Conf.rpm)
  return _internal_rpm();
}
inline void Conf::_internal_set_rpm(double value) {
  _has_bits_[0] |= 0x00000010u;
  rpm_ = value;
}
inline void Conf::set_rpm(double value) {
  _internal_set_rpm(value);
  // @@protoc_insertion_point(field_set:rslidar.Conf.rpm)
}

// optional int32 npackets = 4;
inline bool Conf::_internal_has_npackets() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Conf::has_npackets() const {
  return _internal_has_npackets();
}
inline void Conf::clear_npackets() {
  npackets_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Conf::_internal_npackets() const {
  return npackets_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Conf::npackets() const {
  // @@protoc_insertion_point(field_get:rslidar.Conf.npackets)
  return _internal_npackets();
}
inline void Conf::_internal_set_npackets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  npackets_ = value;
}
inline void Conf::set_npackets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_npackets(value);
  // @@protoc_insertion_point(field_set:rslidar.Conf.npackets)
}

// optional int32 msop_port = 5;
inline bool Conf::_internal_has_msop_port() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Conf::has_msop_port() const {
  return _internal_has_msop_port();
}
inline void Conf::clear_msop_port() {
  msop_port_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Conf::_internal_msop_port() const {
  return msop_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Conf::msop_port() const {
  // @@protoc_insertion_point(field_get:rslidar.Conf.msop_port)
  return _internal_msop_port();
}
inline void Conf::_internal_set_msop_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  msop_port_ = value;
}
inline void Conf::set_msop_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msop_port(value);
  // @@protoc_insertion_point(field_set:rslidar.Conf.msop_port)
}

// optional int32 difop_port = 6;
inline bool Conf::_internal_has_difop_port() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Conf::has_difop_port() const {
  return _internal_has_difop_port();
}
inline void Conf::clear_difop_port() {
  difop_port_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Conf::_internal_difop_port() const {
  return difop_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Conf::difop_port() const {
  // @@protoc_insertion_point(field_get:rslidar.Conf.difop_port)
  return _internal_difop_port();
}
inline void Conf::_internal_set_difop_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  difop_port_ = value;
}
inline void Conf::set_difop_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_difop_port(value);
  // @@protoc_insertion_point(field_set:rslidar.Conf.difop_port)
}

// optional double cut_angle = 7;
inline bool Conf::_internal_has_cut_angle() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Conf::has_cut_angle() const {
  return _internal_has_cut_angle();
}
inline void Conf::clear_cut_angle() {
  cut_angle_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double Conf::_internal_cut_angle() const {
  return cut_angle_;
}
inline double Conf::cut_angle() const {
  // @@protoc_insertion_point(field_get:rslidar.Conf.cut_angle)
  return _internal_cut_angle();
}
inline void Conf::_internal_set_cut_angle(double value) {
  _has_bits_[0] |= 0x00000080u;
  cut_angle_ = value;
}
inline void Conf::set_cut_angle(double value) {
  _internal_set_cut_angle(value);
  // @@protoc_insertion_point(field_set:rslidar.Conf.cut_angle)
}

// required string output_packets_topic = 8;
inline bool Conf::_internal_has_output_packets_topic() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Conf::has_output_packets_topic() const {
  return _internal_has_output_packets_topic();
}
inline void Conf::clear_output_packets_topic() {
  output_packets_topic_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Conf::output_packets_topic() const {
  // @@protoc_insertion_point(field_get:rslidar.Conf.output_packets_topic)
  return _internal_output_packets_topic();
}
inline void Conf::set_output_packets_topic(const std::string& value) {
  _internal_set_output_packets_topic(value);
  // @@protoc_insertion_point(field_set:rslidar.Conf.output_packets_topic)
}
inline std::string* Conf::mutable_output_packets_topic() {
  // @@protoc_insertion_point(field_mutable:rslidar.Conf.output_packets_topic)
  return _internal_mutable_output_packets_topic();
}
inline const std::string& Conf::_internal_output_packets_topic() const {
  return output_packets_topic_.Get();
}
inline void Conf::_internal_set_output_packets_topic(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  output_packets_topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Conf::set_output_packets_topic(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  output_packets_topic_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rslidar.Conf.output_packets_topic)
}
inline void Conf::set_output_packets_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  output_packets_topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rslidar.Conf.output_packets_topic)
}
inline void Conf::set_output_packets_topic(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  output_packets_topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rslidar.Conf.output_packets_topic)
}
inline std::string* Conf::_internal_mutable_output_packets_topic() {
  _has_bits_[0] |= 0x00000004u;
  return output_packets_topic_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Conf::release_output_packets_topic() {
  // @@protoc_insertion_point(field_release:rslidar.Conf.output_packets_topic)
  if (!_internal_has_output_packets_topic()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return output_packets_topic_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Conf::set_allocated_output_packets_topic(std::string* output_packets_topic) {
  if (output_packets_topic != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  output_packets_topic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_packets_topic,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rslidar.Conf.output_packets_topic)
}
inline std::string* Conf::unsafe_arena_release_output_packets_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rslidar.Conf.output_packets_topic)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return output_packets_topic_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Conf::unsafe_arena_set_allocated_output_packets_topic(
    std::string* output_packets_topic) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (output_packets_topic != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  output_packets_topic_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      output_packets_topic, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rslidar.Conf.output_packets_topic)
}

// required string output_difop_topic = 9;
inline bool Conf::_internal_has_output_difop_topic() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Conf::has_output_difop_topic() const {
  return _internal_has_output_difop_topic();
}
inline void Conf::clear_output_difop_topic() {
  output_difop_topic_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Conf::output_difop_topic() const {
  // @@protoc_insertion_point(field_get:rslidar.Conf.output_difop_topic)
  return _internal_output_difop_topic();
}
inline void Conf::set_output_difop_topic(const std::string& value) {
  _internal_set_output_difop_topic(value);
  // @@protoc_insertion_point(field_set:rslidar.Conf.output_difop_topic)
}
inline std::string* Conf::mutable_output_difop_topic() {
  // @@protoc_insertion_point(field_mutable:rslidar.Conf.output_difop_topic)
  return _internal_mutable_output_difop_topic();
}
inline const std::string& Conf::_internal_output_difop_topic() const {
  return output_difop_topic_.Get();
}
inline void Conf::_internal_set_output_difop_topic(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  output_difop_topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Conf::set_output_difop_topic(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  output_difop_topic_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rslidar.Conf.output_difop_topic)
}
inline void Conf::set_output_difop_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  output_difop_topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rslidar.Conf.output_difop_topic)
}
inline void Conf::set_output_difop_topic(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  output_difop_topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rslidar.Conf.output_difop_topic)
}
inline std::string* Conf::_internal_mutable_output_difop_topic() {
  _has_bits_[0] |= 0x00000008u;
  return output_difop_topic_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Conf::release_output_difop_topic() {
  // @@protoc_insertion_point(field_release:rslidar.Conf.output_difop_topic)
  if (!_internal_has_output_difop_topic()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return output_difop_topic_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Conf::set_allocated_output_difop_topic(std::string* output_difop_topic) {
  if (output_difop_topic != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  output_difop_topic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_difop_topic,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rslidar.Conf.output_difop_topic)
}
inline std::string* Conf::unsafe_arena_release_output_difop_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rslidar.Conf.output_difop_topic)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return output_difop_topic_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Conf::unsafe_arena_set_allocated_output_difop_topic(
    std::string* output_difop_topic) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (output_difop_topic != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  output_difop_topic_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      output_difop_topic, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rslidar.Conf.output_difop_topic)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rslidar

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rslidar_2eproto
